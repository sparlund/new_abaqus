#include "../include/Gauss.h"


// for i in [-sqrt(3/5), 0, -sqrt(3/5)]:
//  for j in [-sqrt(3/5), 0, -sqrt(3/5)]:
//      for k in [-sqrt(3/5), 0, -sqrt(3/5)]:
//          gp = [i,j,k]
const std::array<std::array<double, 3>,27> Gauss::_3D::integration_points_3_by_3_by_3 = {{
                                            {-0.77459666924148d,  -0.77459666924148d,  -0.77459666924148d},
                                            {0.00000000000000d,  -0.77459666924148d,  -0.77459666924148d},
                                            {0.77459666924148d,  -0.77459666924148d,  -0.77459666924148d},
                                            {-0.77459666924148d,   0.00000000000000d,  -0.77459666924148d},
                                            {0.00000000000000d,   0.00000000000000d,  -0.77459666924148d},
                                            {0.77459666924148d,   0.00000000000000d,  -0.77459666924148d},
                                            {-0.77459666924148d,   0.77459666924148d,  -0.77459666924148d},
                                            {0.00000000000000d,   0.77459666924148d,  -0.77459666924148d},
                                            {0.77459666924148d,   0.77459666924148d,  -0.77459666924148d},
                                            {-0.77459666924148d,  -0.77459666924148d,   0.00000000000000d},
                                            {0.00000000000000d,  -0.77459666924148d,   0.00000000000000d},
                                            {0.77459666924148d,  -0.77459666924148d,   0.00000000000000d},
                                            {-0.77459666924148d,   0.00000000000000d,   0.00000000000000d},
                                            {0.00000000000000d,   0.00000000000000d,   0.00000000000000d},
                                            {0.77459666924148d,   0.00000000000000d,   0.00000000000000d},
                                            {-0.77459666924148d,   0.77459666924148d,   0.00000000000000d},
                                            {0.00000000000000d,   0.77459666924148d,   0.00000000000000d},
                                            {0.77459666924148d,   0.77459666924148d,   0.00000000000000d},
                                            {-0.77459666924148d,  -0.77459666924148d,   0.77459666924148d},
                                            {0.00000000000000d,  -0.77459666924148d,   0.77459666924148d},
                                            {0.77459666924148d,  -0.77459666924148d,   0.77459666924148d},
                                            {-0.77459666924148d,   0.00000000000000d,   0.77459666924148d},
                                            {0.00000000000000d,   0.00000000000000d,   0.77459666924148d},
                                            {0.77459666924148d,   0.00000000000000d,   0.77459666924148d},
                                            {-0.77459666924148d,   0.77459666924148d,   0.77459666924148d},
                                            {0.00000000000000d,   0.77459666924148d,   0.77459666924148d},
                                            {0.77459666924148d,   0.77459666924148d,   0.77459666924148d}   }};   
// for i in [5/9, 8/9, 5/9]:
//  for j in [5/9, 8/9, 5/9]:
//      for k in [5/9, 8/9, 5/9]:
//          w = i*j*k
const std::array<double, 27> Gauss::_3D::gauss_weights_3_by_3_by_3 = {0.17146776406035d,   0.27434842249657d,   0.17146776406035d,
                                                                     0.27434842249657d,   0.43895747599451d,   0.27434842249657d,
                                                                     0.17146776406035d,   0.27434842249657d,   0.17146776406035d,
                                                                     0.27434842249657d,   0.43895747599451d,   0.27434842249657d,
                                                                     0.43895747599451d,   0.70233196159122d,   0.43895747599451d,
                                                                     0.27434842249657d,   0.43895747599451d,   0.27434842249657d,
                                                                     0.17146776406035d,   0.27434842249657d,   0.17146776406035d,
                                                                     0.27434842249657d,   0.43895747599451d,   0.27434842249657d,
                                                                     0.17146776406035d,   0.27434842249657d,   0.17146776406035d};



// for i in [-np.sqrt(1/3), np.sqrt(1/3)]:
//  for j in [-np.sqrt(1/3), np.sqrt(1/3)]
//      for j in [-np.sqrt(1/3), np.sqrt(1/3)]
//          gp = [i,j,k]
const std::array<std::array<double, 3>,8> Gauss::_3D::integration_points_2_by_2_by_2 = {{
                                                                      {-0.577350269189625d, -0.577350269189625d, -0.577350269189625d},
                                                                      {-0.577350269189625d, -0.577350269189625d, 0.577350269189625d},
                                                                      {-0.577350269189625d, 0.577350269189625d, -0.577350269189625d},
                                                                      {-0.577350269189625d, 0.577350269189625d, 0.577350269189625d},
                                                                      {0.577350269189625d, -0.577350269189625d, -0.577350269189625d},
                                                                      {0.577350269189625d, -0.577350269189625d, 0.577350269189625d},
                                                                      {0.577350269189625d, 0.577350269189625d, -0.577350269189625d},
                                                                      {0.577350269189625d, 0.577350269189625d, 0.577350269189625d}}};    
// w same for all points
const std::array<double, 8> Gauss::_3D::gauss_weights_2_by_2_by_2 = {1,1,1,1,1,1,1,1};

// a = (5-sqrt(5))/20
// b = (5 + 3*sqrt(5))/20
// gp = [a a a;
//       a a b;
//       a b a;
//       b a a]
// w = [1 1 1 1]/24
const std::array<std::array<double, 3>,4> Gauss::_3D::integration_points_4 = {{
                                                                  {0.13819660112501d,   0.13819660112501d,   0.13819660112501d},
                                                                  {0.13819660112501d,   0.13819660112501d,   0.58541019662496d},
                                                                  {0.13819660112501d,   0.58541019662496d,   0.13819660112501d},
                                                                  {0.58541019662496d,   0.13819660112501d,   0.13819660112501d}}};
const std::array<double, 4> Gauss::_3D::gauss_weights_4 = {0.041666666666666d,   0.041666666666666d,   0.041666666666666d,   0.041666666666666d};

// for i in [-sqrt(1/3), sqrt(1/3)]:
//  for j in [-sqrt(1/3), sqrt(1/3)]:
//      gp = [i,j]
// w = [1 1 1 1]
const std::array<std::array<double, 2>,4> Gauss::_2D::integration_points_2_by_2 = {{{-0.577350269189625d, -0.577350269189625d},
                                                                                   { 0.577350269189625d, -0.577350269189625d},
                                                                                   { 0.577350269189625d,  0.577350269189625d},
                                                                                   {-0.577350269189625d,  0.577350269189625d}}};
 
const std::array<double, 4> Gauss::_2D::gauss_weights_2_by_2 = {1.d, 1.d, 1.d, 1.d};



